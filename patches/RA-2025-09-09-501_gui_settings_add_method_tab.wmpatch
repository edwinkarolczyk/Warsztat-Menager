{
  "patch_id": "RA-2025-09-09-501",
  "description": "gui_settings: dodaj kart 'Patche' (skan/apply + przywracanie kopii)",
  "file": "gui_settings.py",
  "ops": [
    { "op": "guard_absent", "must_not_match": "def\\s+_add_patch_manager_tab\\s*\\(" },
    { "op": "insert_before",
      "anchor": "^\\s{4}def\\s+_on_tab_change\\s*\\(",
      "text": "\n    def _add_patch_manager_tab(self, base_dir):\n        \"\"\"Zakadka 'Patche' - skanowanie/zastosowanie patchy i przywracanie kopii.\"\"\"\n        import tkinter as tk\n        from tkinter import ttk, messagebox, scrolledtext\n        import os, sys, subprocess, shutil\n\n        tab = ttk.Frame(self.nb)\n        self.nb.add(tab, text=\"Patche\")\n\n        ttk.Label(tab, text=\"Folder patchy (*.wmpatch):\").grid(row=0, column=0, sticky=\"w\", padx=8, pady=(8,2))\n        patches_var = tk.StringVar(value=os.path.join(base_dir, \"patches\"))\n        entry = ttk.Entry(tab, textvariable=patches_var, width=60)\n        entry.grid(row=0, column=1, sticky=\"ew\", padx=8, pady=(8,2))\n        ttk.Button(tab, text=\"Otwórz folder\", command=(lambda p=patches_var: (os.startfile(p.get()) if os.name==\"nt\" else subprocess.Popen([\"xdg-open\", p.get()])))).grid(row=0, column=2, padx=8, pady=(8,2))\n\n        out = scrolledtext.ScrolledText(tab, height=18, width=100, state=\"disabled\")\n        out.grid(row=1, column=0, columnspan=3, sticky=\"nsew\", padx=8, pady=8)\n\n        btns = ttk.Frame(tab); btns.grid(row=2, column=0, columnspan=3, sticky=\"w\", padx=8, pady=(0,8))\n        run_btn   = ttk.Button(btns, text=\"Skanuj (Dry-run)\")\n        apply_btn = ttk.Button(btns, text=\"Zastosuj (Apply)\")\n        run_btn.pack(side=\"left\", padx=(0,8))\n        apply_btn.pack(side=\"left\")\n\n        tab.columnconfigure(1, weight=1)\n        tab.rowconfigure(1,  weight=1)\n        tab.rowconfigure(5,  weight=1)\n\n        def _append(text: str):\n            out.configure(state=\"normal\"); out.insert(\"end\", text + \"\\n\"); out.see(\"end\"); out.configure(state=\"disabled\")\n\n        def _run_patcher(do_apply: bool):\n            patch_dir = patches_var.get().strip()\n            if not os.path.isdir(patch_dir):\n                _append(f\"[WM-DBG] [PATCH] brak katalogu: {patch_dir}\")\n                messagebox.showwarning(\"Brak katalogu\", f\"Nie znaleziono: {patch_dir}\", parent=tab); return\n            _append(f\"[WM-DBG] [PATCH] base={base_dir}\")\n            _append(f\"[WM-DBG] [PATCH] patches={patch_dir}\")\n            _append(f\"[WM-DBG] [PATCH] mode={'APPLY' if do_apply else 'DRY-RUN'}\")\n            try:\n                try:\n                    from wm_patcher import apply_patches as _apply\n                except Exception:\n                    _apply = None\n                if _apply is not None:\n                    results = _apply(base_dir=base_dir, patches_dir=patch_dir, dry_run=(not do_apply), verbose=True)\n                    changed = [r for r in results if r.get('changed')]\n                    for r in results:\n                        _append(f\"- {r.get('file')}: {'CHANGED' if r.get('changed') else 'OK'}\")\n                        for d in r.get('details', []): _append(f\"    • {d}\")\n                    messagebox.showinfo(\"Patche\", f\"Zastosowano {len(results)} plików, zmian: {len(changed)}\", parent=tab)\n                else:\n                    exe = sys.executable\n                    cmd = [exe, os.path.join(base_dir, \"wm_patcher.py\"), \"--base\", base_dir, \"--patches\", patch_dir]\n                    if do_apply: cmd.append(\"--apply\")\n                    _append(\"[WM-DBG] uruchamiam: \" + \" \".join(cmd))\n                    proc = subprocess.run(cmd, capture_output=True, text=True, cwd=base_dir)\n                    if proc.stdout:\n                        for line in proc.stdout.splitlines(): _append(line)\n                    if proc.stderr: _append(\"[STDERR] \" + proc.stderr.strip())\n                    messagebox.showinfo(\"Patche\", f\"Zakoczono (rc={proc.returncode}). Szczegóy powyej.\", parent=tab)\n            except Exception as e:\n                _append(f\"[WM-DBG] [ERROR] {e}\"); messagebox.showerror(\"Bd patchera\", str(e), parent=tab)\n\n        run_btn.configure(command=lambda: _run_patcher(False))\n        apply_btn.configure(command=lambda: _run_patcher(True))\n\n        ttk.Separator(tab).grid(row=3, column=0, columnspan=3, sticky=\"ew\", padx=8, pady=4)\n        ttk.Label(tab, text=\"Kopie patchy (backup/patches):\").grid(row=4, column=0, sticky=\"w\", padx=8)\n\n        backups = ttk.Treeview(tab, columns=(\"files\",), show=\"tree\")\n        backups.grid(row=5, column=0, columnspan=3, sticky=\"nsew\", padx=8, pady=(2,8))\n\n        def _refresh_backups():\n            root_dir = os.path.join(base_dir, \"backup\", \"patches\")\n            for i in backups.get_children(): backups.delete(i)\n            if not os.path.isdir(root_dir): _append(f\"[WM-DBG] brak folderu kopii: {root_dir}\"); return\n            for name in sorted(os.listdir(root_dir)):\n                d = os.path.join(root_dir, name)\n                if not os.path.isdir(d): continue\n                files = [f for f in os.listdir(d) if os.path.isfile(os.path.join(d,f))]\n                node = backups.insert(\"\", \"end\", iid=name, text=name, values=(len(files),))\n                for f in sorted(files): backups.insert(node, \"end\", text=f)\n\n        def _restore_selected():\n            sel = backups.selection()\n            if not sel:\n                messagebox.showinfo(\"Przywracanie\", \"Wybierz katalog kopii (timestamp).\", parent=tab); return\n            ts = sel[0]\n            root_dir = os.path.join(base_dir, \"backup\", \"patches\", ts)\n            if not os.path.isdir(root_dir): messagebox.showerror(\"Bd\", f\"Brak katalogu: {root_dir}\", parent=tab); return\n            if not messagebox.askyesno(\"Potwierd\", f\"Przywróci kopi: {ts}?\", parent=tab): return\n            restored = 0; skipped = 0\n            for f in os.listdir(root_dir):\n                src = os.path.join(root_dir, f)\n                if not os.path.isfile(src): continue\n                dst = os.path.join(base_dir, f)\n                if not os.path.exists(dst):\n                    hit = None\n                    for dirpath, dirnames, filenames in os.walk(base_dir):\n                        if f in filenames:\n                            cand = os.path.join(dirpath, f)\n                            if hit is None: hit = cand\n                            else: hit = None; break\n                    if hit: dst = hit\n                try:\n                    shutil.copy2(src, dst)\n                    restored += 1; _append(f\"[WM-DBG] [RESTORE] {f} -> {dst}\")\n                except Exception as e:\n                    skipped += 1; _append(f\"[WM-DBG] [RESTORE] SKIP {f}: {e}\")\n            messagebox.showinfo(\"Przywracanie\", f\"Przywrócono: {restored}, pominito: {skipped}\", parent=tab)\n\n        ctrl = ttk.Frame(tab); ctrl.grid(row=6, column=0, columnspan=3, sticky=\"w\", padx=8, pady=(0,8))\n        ttk.Button(ctrl, text=\"Odwie kopie\", command=_refresh_backups).pack(side=\"left\", padx=(0,8))\n        ttk.Button(ctrl, text=\"Przywró zaznaczon kopi\", command=_restore_selected).pack(side=\"left\")\n\n        _refresh_backups()\n        _append(\"[WM-DBG] [SETTINGS] zakadka Patche: OK\")\n"
    }
  ]
}